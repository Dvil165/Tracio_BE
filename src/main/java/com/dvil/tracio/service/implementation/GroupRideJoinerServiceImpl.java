package com.dvil.tracio.service.implementation;

import com.dvil.tracio.dto.GroupRideJoinerDTO;
import com.dvil.tracio.entity.GroupRide;
import com.dvil.tracio.entity.GroupRideJoiner;
import com.dvil.tracio.entity.User;
import com.dvil.tracio.enums.MatchType;
import com.dvil.tracio.enums.RoleName;
import com.dvil.tracio.mapper.GroupRideJoinerMapper;
import com.dvil.tracio.repository.GroupRideJoinerRepo;
import com.dvil.tracio.repository.GroupRideRepo;
import com.dvil.tracio.repository.UserRepo;
import com.dvil.tracio.service.GroupRideJoinerService;
import org.springframework.http.HttpStatus;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.server.ResponseStatusException;

import java.util.List;
import java.util.stream.Collectors;

@Service
public class GroupRideJoinerServiceImpl implements GroupRideJoinerService {
    private final GroupRideJoinerRepo groupRideJoinerRepo;
    private final GroupRideRepo groupRideRepo;
    private final UserRepo userRepo;
    private final GroupRideJoinerMapper groupRideJoinerMapper = GroupRideJoinerMapper.INSTANCE;

    public GroupRideJoinerServiceImpl(GroupRideJoinerRepo groupRideJoinerRepo, GroupRideRepo groupRideRepo, UserRepo userRepo) {
        this.groupRideJoinerRepo = groupRideJoinerRepo;
        this.groupRideRepo = groupRideRepo;
        this.userRepo = userRepo;
    }

    @Override
    @Transactional
    public GroupRideJoinerDTO joinGroupRide(Integer groupRideId, String password) {
        User user = getCurrentUser();
        GroupRide groupRide = groupRideRepo.findById(groupRideId)
                .orElseThrow(() -> new ResponseStatusException(HttpStatus.NOT_FOUND, "GroupRide kh√¥ng t·ªìn t·∫°i!"));

        // üî• Ki·ªÉm tra n·∫øu GroupRide l√† PRIVATE v√† m·∫≠t kh·∫©u kh√¥ng kh·ªõp
        if (groupRide.getMatchType() == MatchType.PRIVATE) {
            if (password == null || !password.equals(groupRide.getMatchPassword())) {
                throw new ResponseStatusException(HttpStatus.UNAUTHORIZED, "M·∫≠t kh·∫©u kh√¥ng ch√≠nh x√°c!");
            }
        }

        // üî• Ki·ªÉm tra n·∫øu ng∆∞·ªùi d√πng ƒë√£ tham gia GroupRide n√†y
        boolean alreadyJoined = groupRideJoinerRepo.existsByGroupRideAndUser(groupRide, user);
        if (alreadyJoined) {
            throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "B·∫°n ƒë√£ tham gia GroupRide n√†y!");
        }

        // ‚úÖ Th√™m user v√†o GroupRide
        GroupRideJoiner joiner = new GroupRideJoiner();
        joiner.setGroupRide(groupRide);
        joiner.setUser(user);

        groupRideJoinerRepo.save(joiner);

        return groupRideJoinerMapper.toDTO(joiner);
    }

    @Override
    @Transactional
    public void leaveGroupRide(Integer groupRideId) {
        User user = getCurrentUser();
        GroupRide groupRide = groupRideRepo.findById(groupRideId)
                .orElseThrow(() -> new ResponseStatusException(HttpStatus.NOT_FOUND, "GroupRide kh√¥ng t·ªìn t·∫°i!"));

        GroupRideJoiner joiner = groupRideJoinerRepo.findByGroupRideAndUser(groupRide, user)
                .orElseThrow(() -> new ResponseStatusException(HttpStatus.BAD_REQUEST, "B·∫°n ch∆∞a tham gia GroupRide n√†y!"));

        groupRideJoinerRepo.delete(joiner);
    }

    @Override
    public List<GroupRideJoinerDTO> getAllJoiners() {
        User user = getCurrentUser();

        // üî• N·∫øu l√† Admin, tr·∫£ v·ªÅ to√†n b·ªô danh s√°ch GroupRideJoiners
        if (user.getRole().equals(RoleName.ADMIN)) {
            return groupRideJoinerRepo.findAll()
                    .stream()
                    .map(groupRideJoinerMapper::toDTO)
                    .collect(Collectors.toList());
        }

        throw new ResponseStatusException(HttpStatus.FORBIDDEN, "B·∫°n kh√¥ng c√≥ quy·ªÅn xem danh s√°ch n√†y.");
    }

    @Override
    public List<GroupRideJoinerDTO> getJoinersByGroupRideId(Integer groupRideId) {
        User user = getCurrentUser();

        GroupRide groupRide = groupRideRepo.findById(groupRideId)
                .orElseThrow(() -> new ResponseStatusException(HttpStatus.NOT_FOUND, "GroupRide v·ªõi ID " + groupRideId + " kh√¥ng t·ªìn t·∫°i"));

        boolean isAdmin = user.getRole().equals(RoleName.ADMIN);
        boolean isMember = groupRideJoinerRepo.existsByGroupRideAndUser(groupRide, user);

        if (!isAdmin && !isMember) {
            throw new ResponseStatusException(HttpStatus.FORBIDDEN, "B·∫°n kh√¥ng c√≥ quy·ªÅn xem danh s√°ch th√†nh vi√™n c·ªßa GroupRide n√†y.");
        }

        return groupRideJoinerRepo.findByGroupRide(groupRide)
                .stream()
                .map(groupRideJoinerMapper::toDTO)
                .collect(Collectors.toList());
    }
    @Override
    public List<GroupRideJoinerDTO> getMyJoinedGroupRides() {
        User currentUser = getCurrentUser();

        // L·∫•y danh s√°ch c√°c group do user n√†y t·∫°o
        List<GroupRide> createdGroups = groupRideRepo.findByCreatedBy_Id(currentUser.getId());
        List<Integer> createdGroupIds = createdGroups.stream()
                .map(GroupRide::getId)
                .collect(Collectors.toList());

        // L·∫•y c√°c group user ƒë√£ tham gia
        List<GroupRideJoiner> joined = groupRideJoinerRepo.findByUser_Id(currentUser.getId());

        // L·ªçc ra nh·ªØng group m√† user tham gia nh∆∞ng kh√¥ng ph·∫£i ng∆∞·ªùi t·∫°o
        List<GroupRideJoinerDTO> result = joined.stream()
                .filter(joiner -> !createdGroupIds.contains(joiner.getGroupRide().getId()))
                .map(groupRideJoinerMapper::toDTO)
                .collect(Collectors.toList());

        if (result.isEmpty()) {
            throw new ResponseStatusException(HttpStatus.NOT_FOUND, "B·∫°n ch∆∞a tham gia GroupRide n√†o.");
        }

        return result;
    }


    private User getCurrentUser() {
        Object principal = SecurityContextHolder.getContext().getAuthentication().getPrincipal();
        if (principal instanceof UserDetails) {
            String username = ((UserDetails) principal).getUsername();
            return userRepo.findByUsername(username)
                    .orElseThrow(() -> new ResponseStatusException(HttpStatus.UNAUTHORIZED, "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng"));
        }
        throw new ResponseStatusException(HttpStatus.UNAUTHORIZED, "Kh√¥ng th·ªÉ x√°c th·ª±c ng∆∞·ªùi d√πng");
    }
}
